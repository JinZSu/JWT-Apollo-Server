import { users } from "./data.js";

import jwt from "jsonwebtoken";

export default {
    Query: {
    user(parent, { id }) {
        return users.find(user => user.id === id);
    },
    viewer(parent, args, { user }) {
        return users.find(({ id }) => id === user.sub);
        }
    },
    Mutation: {
        // Email validation should be implemented for Security purposes in Production
        // Secure Password storage needs to be implemented for Security purposes in Production
        // For the purpose of this POC, I will not be coding this. But I am aware of the security concerns

        // Used for creating the JWT for login
        // Simulate a normal login enviornment U/P
        // auth-provider === user-pass
        // email will be set (Not sure on use-case so I'll allow all emails)
        // password is required, and not encrypted and stored correctly for this P.O.C
        // appname will be generated by the browser. In this case, I will allow an input
        login(parent, { email, password, appname }) {
            const { id, permissions, roles } = users.find(
                user => user.email === email && user.password === password
            );
            return jwt.sign(
                { "https://localhost/4000": { id, roles, permissions, appname, "auth-provider": "user-pass" } },
                "SECRET",
                { algorithm: "HS256", subject: id, expiresIn: "1d" }
            );
        },

        // Used for generating the SSO JWT Token
        // auth-provider === user-pass
        // email will be set (Normally it will be domain specific, but I'm not too sure on the usecase)
        // appname will be generated by the browser. In this case, I will allow an input
        SSO(parent, { email, appname }) {
            const { id, permissions, roles } = users.find(
                user => user.email === email 
            );
            return jwt.sign(
                { "https://localhost/4000": { id ,roles, permissions, appname, email, "auth-provider":"SSO"} },
                "SECRET",
                { algorithm: "HS256", subject: id, expiresIn: "1d" }
            );
        }
    }

};